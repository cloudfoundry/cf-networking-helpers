// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type UUIDGenerator struct {
	GenerateUUIDStub        func() (string, error)
	generateUUIDMutex       sync.RWMutex
	generateUUIDArgsForCall []struct {
	}
	generateUUIDReturns struct {
		result1 string
		result2 error
	}
	generateUUIDReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UUIDGenerator) GenerateUUID() (string, error) {
	fake.generateUUIDMutex.Lock()
	ret, specificReturn := fake.generateUUIDReturnsOnCall[len(fake.generateUUIDArgsForCall)]
	fake.generateUUIDArgsForCall = append(fake.generateUUIDArgsForCall, struct {
	}{})
	stub := fake.GenerateUUIDStub
	fakeReturns := fake.generateUUIDReturns
	fake.recordInvocation("GenerateUUID", []interface{}{})
	fake.generateUUIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *UUIDGenerator) GenerateUUIDCallCount() int {
	fake.generateUUIDMutex.RLock()
	defer fake.generateUUIDMutex.RUnlock()
	return len(fake.generateUUIDArgsForCall)
}

func (fake *UUIDGenerator) GenerateUUIDCalls(stub func() (string, error)) {
	fake.generateUUIDMutex.Lock()
	defer fake.generateUUIDMutex.Unlock()
	fake.GenerateUUIDStub = stub
}

func (fake *UUIDGenerator) GenerateUUIDReturns(result1 string, result2 error) {
	fake.generateUUIDMutex.Lock()
	defer fake.generateUUIDMutex.Unlock()
	fake.GenerateUUIDStub = nil
	fake.generateUUIDReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *UUIDGenerator) GenerateUUIDReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateUUIDMutex.Lock()
	defer fake.generateUUIDMutex.Unlock()
	fake.GenerateUUIDStub = nil
	if fake.generateUUIDReturnsOnCall == nil {
		fake.generateUUIDReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateUUIDReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *UUIDGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateUUIDMutex.RLock()
	defer fake.generateUUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UUIDGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
